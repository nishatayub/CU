const { Octokit } = require('@octokit/rest');
const User = require('../models/user');

class GitHubService {
  constructor(accessToken) {
    this.octokit = new Octokit({
      auth: accessToken
    });
  }

  async getUserInfo() {
    try {
      const { data: user } = await this.octokit.rest.users.getAuthenticated();
      return {
        success: true,
        user: {
          id: user.id,
          username: user.login,
          name: user.name,
          email: user.email,
          avatar_url: user.avatar_url
        }
      };
    } catch (error) {
      console.error('Error getting GitHub user info:', error);
      return { success: false, error: error.message };
    }
  }

  async checkCodeUnityRepo() {
    try {
      const userInfo = await this.getUserInfo();
      if (!userInfo.success) return userInfo;

      try {
        const { data: repo } = await this.octokit.rest.repos.get({
          owner: userInfo.user.username,
          repo: 'codeunity-rooms'
        });
        return { success: true, exists: true, repo };
      } catch (error) {
        if (error.status === 404) {
          return { success: true, exists: false };
        }
        throw error;
      }
    } catch (error) {
      console.error('Error checking CodeUnity repo:', error);
      return { success: false, error: error.message };
    }
  }

  async createCodeUnityRepo() {
    try {
      const { data: repo } = await this.octokit.rest.repos.createForAuthenticatedUser({
        name: 'codeunity-rooms',
        description: 'My CodeUnity collaborative coding sessions',
        private: false,
        auto_init: true,
        gitignore_template: 'Node'
      });

      const readmeContent = `# CodeUnity Rooms

This repository contains code from my CodeUnity collaborative coding sessions.

## About CodeUnity
CodeUnity is an AI-powered collaborative coding platform that enables real-time code collaboration with team members.

## Repository Structure
Each folder represents a different coding room/session:
- Room folders are named with the room ID
- Each room contains the files and code written during that session
- Timestamps indicate when the code was saved

## Usage
This repository is automatically managed by CodeUnity. Your code is saved here whenever you use the "Save to GitHub" feature in the CodeUnity editor.

---
*Generated by [CodeUnity](https://codeunity.dev) - AI-Powered Collaborative Coding*
`;

      await this.octokit.rest.repos.createOrUpdateFileContents({
        owner: repo.owner.login,
        repo: repo.name,
        path: 'README.md',
        message: 'Initial commit: CodeUnity integration setup',
        content: Buffer.from(readmeContent).toString('base64')
      });

      return { success: true, repo };
    } catch (error) {
      console.error('Error creating CodeUnity repo:', error);
      return { success: false, error: error.message };
    }
  }


  async saveRoomToGitHub(roomId, files, roomName = null, metadata = null) {
    try {
      const userInfo = await this.getUserInfo();
      if (!userInfo.success) return userInfo;

      // Check if repo exists, create if not
      const repoCheck = await this.checkCodeUnityRepo();
      if (!repoCheck.success) return repoCheck;

      if (!repoCheck.exists) {
        const createResult = await this.createCodeUnityRepo();
        if (!createResult.success) return createResult;
      }

      const username = userInfo.user.username;
      const timestamp = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
      const folderName = roomName ? `${roomId}-${roomName}` : roomId;
      const commitMessage = `Save CodeUnity room: ${roomId} (${timestamp})`;

      const savedFiles = [];
      for (const [fileName, content] of Object.entries(files)) {
        const filePath = `rooms/${folderName}/${fileName}`;
        
        try {
          let sha = null;
          try {
            const { data: existingFile } = await this.octokit.rest.repos.getContent({
              owner: username,
              repo: 'codeunity-rooms',
              path: filePath
            });
            sha = existingFile.sha;
          } catch (error) {
          }

          const result = await this.octokit.rest.repos.createOrUpdateFileContents({
            owner: username,
            repo: 'codeunity-rooms',
            path: filePath,
            message: `${commitMessage} - ${fileName}`,
            content: Buffer.from(content || '').toString('base64'),
            ...(sha && { sha })
          });

          savedFiles.push({
            fileName,
            path: filePath,
            url: result.data.content.html_url
          });
        } catch (fileError) {
          console.error(`Error saving file ${fileName}:`, fileError);
        }
      }
      const sessionInfo = {
        roomId,
        roomName: roomName || roomId,
        savedAt: new Date().toISOString(),
        filesCount: savedFiles.length,
        files: savedFiles.map(f => ({ name: f.fileName, path: f.path })),
        ...(metadata && { metadata })
      };

      const sessionPath = `rooms/${folderName}/session-info.json`;

      let sessionSha = null;
      try {
        const { data: existingSession } = await this.octokit.rest.repos.getContent({
          owner: username,
          repo: 'codeunity-rooms',
          path: sessionPath
        });
        sessionSha = existingSession.sha;
      } catch (error) {
      }

      await this.octokit.rest.repos.createOrUpdateFileContents({
        owner: username,
        repo: 'codeunity-rooms',
        path: sessionPath,
        message: `${commitMessage} - Session info`,
        content: Buffer.from(JSON.stringify(sessionInfo, null, 2)).toString('base64'),
        ...(sessionSha && { sha: sessionSha })
      });

      return {
        success: true,
        savedFiles: savedFiles.length,
        repositoryUrl: `https://github.com/${username}/codeunity-rooms`,
        folderUrl: `https://github.com/${username}/codeunity-rooms/tree/main/rooms/${folderName}`,
        files: savedFiles
      };
    } catch (error) {
      console.error('Error saving room to GitHub:', error);
      return { success: false, error: error.message };
    }
  }

  async getSavedRooms() {
    try {
      const userInfo = await this.getUserInfo();
      if (!userInfo.success) return userInfo;

      const username = userInfo.user.username;

      try {
        const { data: contents } = await this.octokit.rest.repos.getContent({
          owner: username,
          repo: 'codeunity-rooms',
          path: 'rooms'
        });

        const rooms = [];
        for (const item of contents) {
          if (item.type === 'dir') {
            try {
              const { data: sessionFile } = await this.octokit.rest.repos.getContent({
                owner: username,
                repo: 'codeunity-rooms',
                path: `${item.path}/session-info.json`
              });

              const sessionInfo = JSON.parse(Buffer.from(sessionFile.content, 'base64').toString());
              rooms.push({
                ...sessionInfo,
                folderUrl: `https://github.com/${username}/codeunity-rooms/tree/main/${item.path}`
              });
            } catch (error) {
              rooms.push({
                roomId: item.name,
                roomName: item.name,
                folderUrl: `https://github.com/${username}/codeunity-rooms/tree/main/${item.path}`,
                savedAt: null,
                filesCount: 0
              });
            }
          }
        }

        return { success: true, rooms };
      } catch (error) {
        if (error.status === 404) {
          return { success: true, rooms: [] };
        }
        throw error;
      }
    } catch (error) {
      console.error('Error getting saved rooms:', error);
      return { success: false, error: error.message };
    }
  }
}

module.exports = GitHubService;
